{"ast":null,"code":"import store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nexport const fetchData = account => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let allOwnerLips = await store.getState().blockchain.lipToken.methods.getOwnerLips(account).call();\n      let allLips = await store.getState().blockchain.lipToken.methods.getLips().call();\n      dispatch(fetchDataSuccess({\n        allLips,\n        allOwnerLips\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"¡No se ha podido cargar los datos del Smart Contract!\"));\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/digit/OneDrive/Escritorio/nft-1/src/redux/data/dataActions.js"],"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","account","dispatch","allOwnerLips","getState","blockchain","lipToken","methods","getOwnerLips","call","allLips","getLips","err","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC3B,SAAO;AACHC,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;AAClC,SAAO;AACHF,IAAAA,IAAI,EAAE,oBADH;AAEHE,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;AACjC,SAAO;AACHF,IAAAA,IAAI,EAAE,mBADH;AAEHE,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,MAAME,SAAS,GAAIC,OAAD,IAAa;AAClC,SAAO,MAAOC,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;;AACA,QAAG;AACC,UAAIQ,YAAY,GAAG,MAAMT,KAAK,CAACU,QAAN,GAAiBC,UAAjB,CAA4BC,QAA5B,CAAqCC,OAArC,CAA6CC,YAA7C,CAA0DP,OAA1D,EAAmEQ,IAAnE,EAAzB;AACA,UAAIC,OAAO,GAAG,MAAMhB,KAAK,CAACU,QAAN,GAAiBC,UAAjB,CAA4BC,QAA5B,CAAqCC,OAArC,CAA6CI,OAA7C,GAAuDF,IAAvD,EAApB;AACAP,MAAAA,QAAQ,CAACL,gBAAgB,CAAC;AAACa,QAAAA,OAAD;AAAUP,QAAAA;AAAV,OAAD,CAAjB,CAAR;AACH,KAJD,CAIE,OAAMS,GAAN,EAAW;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAV,MAAAA,QAAQ,CAACH,eAAe,CAAC,uDAAD,CAAhB,CAAR;AACH;AACJ,GAVD;AAWH,CAZM","sourcesContent":["import store from \"../store\"\n\nconst fetchDataRequest = () => {\n    return {\n        type: \"CHECK_DATA_REQUEST\",\n    };\n};\n\nconst fetchDataSuccess = (payload) => {\n    return {\n        type: \"CHECK_DATA_SUCCESS\",\n        payload: payload,\n    };\n};\n\nconst fetchDataFailed = (payload) => {\n    return {\n        type: \"CHECK_DATA_FAILED\",\n        payload: payload,\n    };\n};\n\nexport const fetchData = (account) => {\n    return async (dispatch) => {\n        dispatch(fetchDataRequest());\n        try{\n            let allOwnerLips = await store.getState().blockchain.lipToken.methods.getOwnerLips(account).call();\n            let allLips = await store.getState().blockchain.lipToken.methods.getLips().call();\n            dispatch(fetchDataSuccess({allLips, allOwnerLips}));\n        } catch(err) {\n            console.log(err);\n            dispatch(fetchDataFailed(\"¡No se ha podido cargar los datos del Smart Contract!\"))\n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}